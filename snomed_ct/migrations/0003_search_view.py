# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-04-04 20:14
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('snomed_ct', '0002_install_functions'),
    ]

    operations = [
        migrations.RunSQL("""
            CREATE EXTENSION IF NOT EXISTS unaccent;

            ------ Create functions ------
            CREATE OR REPLACE FUNCTION get_lang_type(_short_lang TEXT)
              RETURNS REGCONFIG
            LANGUAGE plpgsql AS
            $func$
            BEGIN
              CASE (_short_lang)
                WHEN 'en' THEN
                RETURN 'english';
              ELSE
                RETURN 'simple';
              END CASE;
            END
            $func$;


            CREATE OR REPLACE FUNCTION get_priority(type_id BIGINT, acceptability_id BIGINT)
              RETURNS "char"
            LANGUAGE plpgsql AS
            $func$
            BEGIN
              -- Fully specified name
              IF type_id = 900000000000003001 THEN
                RETURN 'B';
                -- Preferred term
              ELSIF acceptability_id = 900000000000548007 THEN
                RETURN 'C';
                -- Other synonyms
              ELSE
                RETURN 'D';
              END IF;
            END
            $func$;

            ------ Create View ------
            CREATE MATERIALIZED VIEW terms_based_view AS
              SELECT
                l.refset_id                                            AS lang_refset_refset_id,
                l.acceptability_id                                     AS lang_refset_acceptability_id,

                d.id                                                   AS description_id,
                d.language_code                                        AS description_language_code,
                d.type_id                                              AS description_type_id,
                d.case_significance_id                                 AS description_case_significance_id,
                d.term                                                 AS description_term,

                c.id                                                   AS concept_id,
                c.active                                               AS concpet_active,
                c.definition_status_id                                 AS concpet_definition_status_id,

                setweight(to_tsvector(get_lang_type(d.language_code), unaccent(d.term)),
                          get_priority(d.type_id, l.acceptability_id)) ||
                setweight(to_tsvector('simple', unaccent(d.term)), 'A') AS search_term
              FROM sct2_lang_refset l
                LEFT JOIN sct2_description d ON d.id = l.referenced_component_id
                LEFT JOIN sct2_concept c ON c.id = d.concept_id
              WHERE l.active = TRUE AND d.active = TRUE;


            CREATE INDEX idx_on_search_view ON terms_based_view USING GIN (search_term);
            CREATE INDEX idx_on_terms_based_view ON terms_based_view (description_term);
        """, """
            DROP INDEX IF EXISTS idx_on_search_view;
            DROP INDEX IF EXISTS idx_on_terms_based_view;
            DROP MATERIALIZED VIEW IF EXISTS terms_based_view CASCADE;
            DROP FUNCTION IF EXISTS get_lang_type(_short_lang TEXT);
            DROP FUNCTION IF EXISTS get_priority(type_id BIGINT, acceptability_id BIGINT);
            DROP EXTENSION IF EXISTS unaccent;
        """)
    ]
